<?php declare(strict_types=1);

namespace Framework\Database\Cli;

use Framework\Application\Manager as ApplicationManager;
use Framework\Cli\Interface\Controller;
use Framework\Cli\Symbol;
use Exception;
use Framework\Helper\Config;
use Framework\Helper\File;

/**
 * Generated by www.Tereta.dev on 2024-09-13 20:13:15
 *
 * @class Framework\Database\Cli\Backup
 * @package Framework\Database\Cli
 */
class Backup implements Controller
{
    /**
     * @var string
     */
    private string $varDirectory;

    /**
     * @var Config
     */
    private Config $config;

    /**
     * @method __construct
     */
    public function __construct()
    {
        $this->config = ApplicationManager::getInstance()->getConfig();
        $this->varDirectory = ApplicationManager::getInstance()->getConfig()->get('varDirectory');
    }

    /**
     * @cli database:dump
     * @cliDescription Create a backup of the database
     * @param null|string $file file to store the backup
     * @return void
     * @throws Exception
     */
    public function dump(string $file = ''): void
    {
        if (!$file) {
            $dirName = "{$this->varDirectory}/backup/";
            $file = $dirName . 'backup-' . date('Y-m-d-H-i-s') . '.sql';

            if (!is_dir($dirName)) {
                mkdir($dirName, 0777, true);
            }
        }

        if (str_starts_with($file, './')) {
            $file = getcwd() . substr($file, 1);
        }

        $command = "MYSQL_PWD='{$this->config->get('db.default.password')}' mysqldump -h {$this->config->get('db.default.host')} " .
            "-u {$this->config->get('db.default.user')} " .
            "{$this->config->get('db.default.database')} > {$file}";

        $result = trim(shell_exec("which mysqldump > /dev/null 2>&1 && echo true || echo false"));
        if ($result === 'false') {
            throw new Exception('The "mysqldump" command is not available. Please install it on your system.');
        }

        $result = trim(shell_exec("{$command} 2>{$file}.log && echo true || echo false"));
        if (!is_file($file)) {
            throw new Exception("The {$file} backup file was not created.");
        }

        if ($result === 'false') {
            $error = file_get_contents($file . '.log');
            unlink($file . '.log');
            throw new Exception($error);
        }
        unlink($file . '.log');

        $size = File::formatSize(filesize($file));

        echo Symbol::COLOR_GREEN . "The file {$file} dump has been sucessfully created with {$size}.\n" . Symbol::COLOR_RESET;
    }
}